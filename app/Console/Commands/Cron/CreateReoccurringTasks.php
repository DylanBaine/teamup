<?php

namespace App\Console\Commands\Cron;

use Illuminate\Console\Command;
use App\Models\Task;
use Carbon\Carbon;
use App\Models\Type;

class CreateReoccurringTasks extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cron:create_reoccurring_tasks';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create reoccurring tasks.';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $reoccurringTasks = Task::whereHas('schedule')->get();
        foreach($reoccurringTasks as $task){
            if($task->schedule->shouldRunNow()){
                $this->createDuplicate($task);
            }
        }  
    }

    private function createDuplicate(Task $originalTask){
        manifest("Duplicating $originalTask->name");
        $newStartDate = Carbon::now()->addDays($originalTask->start_date->diffInDays($originalTask->end_date))->toDateTimeString();
        $newTask = $originalTask->replicate();
        $OriginalTaskUrl = url("/app#/tasks/$originalTask->id/manage");
        $newTask->description = "<h2>Auto generated by <a href='$OriginalTaskUrl'>task #$originalTask->id.</a></h2>".$originalTask->description;
        $newTask->start_date = Carbon::now()->toDateTimeString();
        $newTask->end_date = $newStartDate;
        $newTask->type_id = Type::where('name','Task')->where('company_id', $originalTask->company_id)->first()->id;
        $newTask->save();
    }
}
